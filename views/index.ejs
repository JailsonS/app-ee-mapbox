<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Animate the camera along a path</title>
<meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
<link href="https://api.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/earthengine/0.1.226/earthengine-api.min.js"></script>
<style>
body { margin: 0; padding: 0; }
#map { position: absolute; top: 0; bottom: 0; width: 100%; }
</style>
</head>
<body>
<div id="map" data-url='<%=urlRock%>'></div>
 
<script src="./javascripts/utils.js"></script>
<script src="https://unpkg.com/@turf/turf@6/turf.min.js"></script>


<script>



    // TO MAKE THE MAP APPEAR YOU MUST
    // ADD YOUR ACCESS TOKEN FROM
    // https://account.mapbox.com
    mapboxgl.accessToken = 'pk.eyJ1IjoiZ2xvYmFsLXdhdGVyLXdhdGNoIiwiYSI6ImNsMTY3c2txZzE0MTIzYm10anQyYmZqdHIifQ.7bByfnwpQCr-QyUP3Lx1dQ';
    const map = new mapboxgl.Map({
        container: 'map',
        zoom: 2,
        center: [-59.5033, -14.9367],
        pitch: 65,
        bearing: -150,
        // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
        style: 'mapbox://styles/global-water-watch/cl2rke90v003q15lf9d7fthdp',
        interactive: true
    });


    // this is the path the camera will look at
    const targetRoute = routes.target;
    // this is the path the camera will move along
    const cameraRoute = routes.target;
    
    // add terrain, sky, and line layers once the style has loaded
    map.on('style.load', () => {
        
        map.addSource('mapbox-dem', {
            'type': 'raster-dem',
            'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',
            'tileSize': 512,
            //'maxzoom': 14
        });

        map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 2 });



        map.addSource('trace', {
            type: 'geojson',
            data: {
                'type': 'Feature',
                'properties': {},
                'geometry': {
                'type': 'LineString',
                'coordinates': targetRoute
                }
            }
        });

        var urlRock = document.getElementById('map').dataset.url;

        map.addLayer({
            type: 'line',
            source: 'trace',
            id: 'line',
            paint: {
                'line-color': 'yellow',
                'line-width': 5
            },
            layout: {
                'line-cap': 'round',
                'line-join': 'round'
        }});


        map.addLayer({
            id: 'ee-rock-layer',
            type: 'raster',
            source: {
            type: 'raster',
            tiles: [ urlRock ],
            tileSize: 256
            },
            paint: {}
        })

    });

    map.flyTo({
        center: [-59.5033, -14.9367], // Fly to the selected target
        speed: 5,
        zoom: 14,
        essential: true // This animation is considered essential with
        //respect to prefers-reduced-motion
    });
        
    
    // wait for the terrain and sky to load before starting animation
    map.on('load', () => {



        const animationDuration = 500000;
        const cameraAltitude = 6000;
        // get the overall distance of each route so we can interpolate along them
        const routeDistance = turf.lineDistance(turf.lineString(targetRoute));

        const cameraRouteDistance = turf.lineDistance(
            turf.lineString(cameraRoute)
        );
        
        let start;
    
        function frame(time) {
            if (!start) start = time;
            // phase determines how far through the animation we are
            const phase = (time - start) / animationDuration;

            console.log(phase)
        
            // phase is normalized between 0 and 1
            // when the animation is finished, reset start to loop the animation
            if (phase > 1) {
                // wait 1.5 seconds before looping
                setTimeout(() => {
                start = 0.0;
                }, 6000);
            }
                
            // use the phase to get a point that is the appropriate distance along the route
            // this approach syncs the camera and route positions ensuring they move
            // at roughly equal rates even if they don't contain the same number of points
            const alongRoute = turf.along(
                turf.lineString(targetRoute),
                routeDistance * phase
            ).geometry.coordinates;
            
            const alongCamera = turf.along(
                turf.lineString(cameraRoute),
                cameraRouteDistance * phase
            ).geometry.coordinates;
            
            const camera = map.getFreeCameraOptions();
            
            // set the position and altitude of the camera
            camera.position = mapboxgl.MercatorCoordinate.fromLngLat(
            {
                lng: alongCamera[0],
                lat: alongCamera[1]
            },
                cameraAltitude
            );
            
            // tell the camera to look at a point along the route
            camera.lookAtPoint({
                lng: alongRoute[0],
                lat: alongRoute[1]
            });
            
            map.setFreeCameraOptions(camera);

            map.setPaintProperty(
                "line",
                "line-gradient", [
                    "step", ["line-progress"],
                    "yellow",
                    phase,
                    "rgba(0, 0, 0, 0)",
                ]
            );
            
            window.requestAnimationFrame(frame);
        }
    
        window.requestAnimationFrame(frame);
    });



</script>
 
</body>
</html>